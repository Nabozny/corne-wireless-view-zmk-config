#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";
        
        // Reset Bluetooth LADO ESQUERDO - Q+W+E+R (posições 1,2,3,4 com padding)
        bt_reset_left {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <1 2 3 4>;
            timeout-ms = <3000>;
            require-prior-idle-ms = <100>;
        };
        
        // Reset Bluetooth LADO DIREITO - P+O+I+U (posições 10,9,8,7 com padding)  
        bt_reset_right {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <10 9 8 7>;
            timeout-ms = <3000>;
            require-prior-idle-ms = <100>;
        };

        // Alternar TEMPORARIAMENTE para USB - A+S+D (posições 13,14,15 com padding)
        output_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <13 14 15>;
            timeout-ms = <2000>;
            require-prior-idle-ms = <100>;
        };

        // Windows + Tab (Task View) - GUI+NUM+SPACE (posições 3,4,5 com padding)
        win_tab_combo {
            bindings = <&kp LG(TAB)>;
            key-positions = <3 4 5>;
            timeout-ms = <2000>;
            require-prior-idle-ms = <100>;
        };
        
        // QUESTION button (posições 2, 39)
        question_combo {
            bindings = <&kp QMARK>;
            key-positions = <2 39>;
            timeout-ms = <2000>;
            require-prior-idle-ms = <100>;
        };
        
        // ESC button  (posições 1, 2)
        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            timeout-ms = <2000>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base QWERTY Layer (5x3) com padding para shield 6x3
        default_layer {
            bindings = <
                &none    &kp Q    &kp W       &kp E        &kp R          &kp T        &kp Y       &kp U        &kp I        &kp O      &kp P        &none
                &none    &kp A    &kp S       &kp D        &kp F          &kp G        &kp H       &kp J        &kp K        &kp L      &kp SEMI     &none
                &none    &kp Z    &kp X       &kp C        &kp V          &kp B        &kp N       &kp M        &kp COMMA    &kp DOT    &kp SLASH    &none
                                  &mt LGUI    &kp LSHFT    &lt 1 SPACE    &lt 2 RET    &kp BSPC    &kp LCTRL    
            >;
        };

        // Numbers/Navigation Layer (5x3) com padding
        num_layer {
            bindings = <
                &none    &kp KC_QUOTE    &kp UP      &none        &kp LPAR    &kp RPAR    &kp SLASH    &kp N7       &kp N8       &kp N9    &kp MINUS    &none
                &none    &kp LEFT        &kp DOWN    &kp RIGHT    &kp LBKT    &kp RBKT    &kp STAR     &kp N4       &kp N5       &kp N6    &kp PLUS     &none
                &none    &none           &none       &none        &kp LBRC    &kp RBRC    &kp N0       &kp N1       &kp N2       &kp N3    &kp EQUAL    &none
                                                     &trans       &trans      &kp TAB     &kp RET      &kp LSHFT    &kp LCTRL        
            >;
        };

        // Symbols Layer (5x3) com padding
        sym_layer {
            bindings = <
                &none    &kp EXCL        &kp AT          &kp HASH        &kp DOLLAR      &kp PERCENT    &kp AMPS     &kp F9    &kp F10    &kp F11    &kp F12    &none
                &none    &none           &none           &none           &none           &none          &none        &kp F5    &kp F6     &kp F8     &kp F8     &none
                &none    &kp C_VOL_DN    &kp C_VOL_UP    &kp C_BRI_DN    &kp C_BRI_UP    &none          &kp MINUS    &kp F1    &kp F2     &kp F3     &kp F4     &none
                                         &trans          &trans          &trans          &trans         &trans       &trans
            >;
        };
    };
};